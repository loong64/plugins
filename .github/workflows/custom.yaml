---
name: Custom binaries

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: ''

jobs:
  check_release:
    name: Check and create release
    runs-on: ubuntu-latest
    env:
      repo: 'containernetworking/plugins'
      version: ${{ github.event.inputs.version }}
    outputs:
      APP_RELEASE: ${{ steps.check-release.outputs.APP_RELEASE }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Get Version
        run: |
          echo ""
          echo "======== Build Args ========"
          echo "version=${{ env.version }}"

      - name: Create Tag
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git add .
          git commit -m "Release ${{ env.version }}" || true
          git tag ${{ env.version }} || true
          git push origin ${{ env.version }} || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        run: |
          gh release create ${{ env.version }} -R ${{ github.repository }} --title ${{ env.version }} --notes "**Full Changelog**: [${{ env.version }}](https://github.com/${{ env.repo }}/releases/tag/${{ env.version }})" --latest=false || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Release
        id: check-release
        run: |
          gh release view ${{ env.version }} -R ${{ github.repository }} | grep cni-plugins-linux-loong64-${{ env.version }}.tgz >/dev/null 2>&1 || echo "APP_RELEASE=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  linux_release:
    name: Release linux binaries
    runs-on: ubuntu-latest
    needs: check_release
    if: ${{ needs.check_release.outputs.APP_RELEASE == '1' }}
    env:
      repo: 'containernetworking/plugins'
      version: ${{ github.event.inputs.version }}
    strategy:
      matrix:
        goarch: [amd64, arm, arm64, mips64le, ppc64le, riscv64, s390x, loong64]
    steps:
      - name: Get Version
        run: |
          echo "======== Build Args ========"
          echo "version=${{ env.version }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.repo }}
          ref: ${{ env.version }}

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build
        env:
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: ./build_linux.sh -ldflags '-extldflags -static -X github.com/containernetworking/plugins/pkg/utils/buildversion.BuildVersion=${{ env.version }}'

      - name: COPY files
        run: cp README.md LICENSE bin/

      - name: Change plugin file ownership
        working-directory: ./bin
        run: sudo chown -R root:root .

      - name: Create dist directory
        run: mkdir dist

      - name: Create archive file
        working-directory: ./bin
        run: tar cfzpv ../dist/cni-plugins-linux-${{ matrix.goarch }}-${{ env.version }}.tgz .

      - name: Create sha256 checksum
        working-directory: ./dist
        run: sha256sum cni-plugins-linux-${{ matrix.goarch }}-${{ env.version }}.tgz | tee cni-plugins-linux-${{ matrix.goarch }}-${{ env.version }}.tgz.sha256

      - name: Create sha512 checksum
        working-directory: ./dist
        run: sha512sum cni-plugins-linux-${{ matrix.goarch }}-${{ env.version }}.tgz | tee cni-plugins-linux-${{ matrix.goarch }}-${{ env.version }}.tgz.sha512

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./dist/*
          tag: ${{ env.version }}
          overwrite: true
          file_glob: true
